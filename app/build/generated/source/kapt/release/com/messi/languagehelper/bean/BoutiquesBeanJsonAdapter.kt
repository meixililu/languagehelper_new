// Code generated by moshi-kotlin-codegen. Do not edit.
package com.messi.languagehelper.bean

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class BoutiquesBeanJsonAdapter(
  moshi: Moshi
) : JsonAdapter<BoutiquesBean>() {
  private val options: JsonReader.Options = JsonReader.Options.of("objectId", "title", "content",
      "code", "img_url", "tag", "source_name", "source_url", "type", "category", "duration",
      "views", "isAd")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "objectId")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "views")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isAd")

  @Volatile
  private var constructorRef: Constructor<BoutiquesBean>? = null

  override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("BoutiquesBean").append(')') }

  override fun fromJson(reader: JsonReader): BoutiquesBean {
    var objectId: String? = null
    var title: String? = null
    var content: String? = null
    var code: String? = null
    var img_url: String? = null
    var tag: String? = null
    var source_name: String? = null
    var source_url: String? = null
    var type: String? = null
    var category: String? = null
    var duration: String? = null
    var views: Int? = 0
    var isAd: Boolean? = false
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          objectId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("objectId",
              "objectId", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
              reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          content = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("content",
              "content", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          code = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("code", "code", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          img_url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("img_url",
              "img_url", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          tag = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tag", "tag", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          source_name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("source_name",
              "source_name", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          source_url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("source_url",
              "source_url", reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          category = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("category",
              "category", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          duration = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("duration",
              "duration", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          views = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("views", "views", reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          isAd = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("isAd", "isAd",
              reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<BoutiquesBean> = this.constructorRef ?:
        BoutiquesBean::class.java.getDeclaredConstructor(String::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, Int::class.javaPrimitiveType, Boolean::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef =
        it }
    return localConstructor.newInstance(
        objectId,
        title,
        content,
        code,
        img_url,
        tag,
        source_name,
        source_url,
        type,
        category,
        duration,
        views,
        isAd,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: BoutiquesBean?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("objectId")
    stringAdapter.toJson(writer, value.objectId)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("content")
    stringAdapter.toJson(writer, value.content)
    writer.name("code")
    stringAdapter.toJson(writer, value.code)
    writer.name("img_url")
    stringAdapter.toJson(writer, value.img_url)
    writer.name("tag")
    stringAdapter.toJson(writer, value.tag)
    writer.name("source_name")
    stringAdapter.toJson(writer, value.source_name)
    writer.name("source_url")
    stringAdapter.toJson(writer, value.source_url)
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.name("category")
    stringAdapter.toJson(writer, value.category)
    writer.name("duration")
    stringAdapter.toJson(writer, value.duration)
    writer.name("views")
    intAdapter.toJson(writer, value.views)
    writer.name("isAd")
    booleanAdapter.toJson(writer, value.isAd)
    writer.endObject()
  }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.messi.languagehelper.bean

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class CourseDataJsonAdapter(
  moshi: Moshi
) : JsonAdapter<CourseData>() {
  private val options: JsonReader.Options = JsonReader.Options.of("type", "tips", "title",
      "question", "img", "content", "answer", "transalte", "media_url", "start_time", "end_time",
      "medias", "options", "words", "course_id", "order", "unit", "level", "user_result")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "type")

  private val nullableListOfCourseMediasAdapter: JsonAdapter<List<CourseMedias>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, CourseMedias::class.java),
      emptySet(), "medias")

  private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "options")

  private val nullableListOfCourseWordAdapter: JsonAdapter<List<CourseWord>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, CourseWord::class.java),
      emptySet(), "words")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "order")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "user_result")

  @Volatile
  private var constructorRef: Constructor<CourseData>? = null

  override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("CourseData").append(')') }

  override fun fromJson(reader: JsonReader): CourseData {
    var type: String? = null
    var tips: String? = null
    var title: String? = null
    var question: String? = null
    var img: String? = null
    var content: String? = null
    var answer: String? = null
    var transalte: String? = null
    var media_url: String? = null
    var start_time: String? = null
    var end_time: String? = null
    var medias: List<CourseMedias>? = null
    var options_: List<String>? = null
    var words: List<CourseWord>? = null
    var course_id: String? = null
    var order: Int? = 0
    var unit: Int? = 0
    var level: Int? = 0
    var user_result: Boolean? = false
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          tips = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tips", "tips", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
              reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          question = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("question",
              "question", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          img = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("img", "img", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          content = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("content",
              "content", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          answer = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("answer", "answer",
              reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          transalte = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("transalte",
              "transalte", reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          media_url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("media_url",
              "media_url", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          start_time = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("start_time",
              "start_time", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          end_time = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("end_time",
              "end_time", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          medias = nullableListOfCourseMediasAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          options_ = nullableListOfStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          words = nullableListOfCourseWordAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          course_id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("course_id",
              "course_id", reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          order = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("order", "order", reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          unit = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("unit", "unit", reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        17 -> {
          level = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("level", "level", reader)
          // $mask = $mask and (1 shl 17).inv()
          mask0 = mask0 and 0xfffdffff.toInt()
        }
        18 -> {
          user_result = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("user_result",
              "user_result", reader)
          // $mask = $mask and (1 shl 18).inv()
          mask0 = mask0 and 0xfffbffff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<CourseData> = this.constructorRef ?:
        CourseData::class.java.getDeclaredConstructor(String::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, List::class.java, List::class.java, List::class.java,
        String::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Boolean::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef =
        it }
    return localConstructor.newInstance(
        type,
        tips,
        title,
        question,
        img,
        content,
        answer,
        transalte,
        media_url,
        start_time,
        end_time,
        medias,
        options_,
        words,
        course_id,
        order,
        unit,
        level,
        user_result,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: CourseData?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.name("tips")
    stringAdapter.toJson(writer, value.tips)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("question")
    stringAdapter.toJson(writer, value.question)
    writer.name("img")
    stringAdapter.toJson(writer, value.img)
    writer.name("content")
    stringAdapter.toJson(writer, value.content)
    writer.name("answer")
    stringAdapter.toJson(writer, value.answer)
    writer.name("transalte")
    stringAdapter.toJson(writer, value.transalte)
    writer.name("media_url")
    stringAdapter.toJson(writer, value.media_url)
    writer.name("start_time")
    stringAdapter.toJson(writer, value.start_time)
    writer.name("end_time")
    stringAdapter.toJson(writer, value.end_time)
    writer.name("medias")
    nullableListOfCourseMediasAdapter.toJson(writer, value.medias)
    writer.name("options")
    nullableListOfStringAdapter.toJson(writer, value.options)
    writer.name("words")
    nullableListOfCourseWordAdapter.toJson(writer, value.words)
    writer.name("course_id")
    stringAdapter.toJson(writer, value.course_id)
    writer.name("order")
    intAdapter.toJson(writer, value.order)
    writer.name("unit")
    intAdapter.toJson(writer, value.unit)
    writer.name("level")
    intAdapter.toJson(writer, value.level)
    writer.name("user_result")
    booleanAdapter.toJson(writer, value.user_result)
    writer.endObject()
  }
}

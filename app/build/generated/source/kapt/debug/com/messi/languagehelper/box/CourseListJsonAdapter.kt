// Code generated by moshi-kotlin-codegen. Do not edit.
package com.messi.languagehelper.box

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class CourseListJsonAdapter(
  moshi: Moshi
) : JsonAdapter<CourseList>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "objectId", "course_id",
      "name", "course_num", "current", "order", "to_activity", "img", "type", "lock", "backkup",
      "backkup1", "backkup2", "backkup3", "backkup4", "backkup5", "finish", "user_level_num",
      "user_unit_num", "level_num", "unit_num", "views")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "objectId")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "course_num")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "to_activity")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "finish")

  @Volatile
  private var constructorRef: Constructor<CourseList>? = null

  override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("CourseList").append(')') }

  override fun fromJson(reader: JsonReader): CourseList {
    var id: Long? = 0L
    var objectId: String? = null
    var course_id: String? = null
    var name: String? = null
    var course_num: Int? = 0
    var current: Int? = 0
    var order: Int? = 0
    var to_activity: String? = null
    var img: String? = null
    var type: String? = null
    var lock: String? = null
    var backkup: String? = null
    var backkup1: String? = null
    var backkup2: String? = null
    var backkup3: String? = null
    var backkup4: String? = null
    var backkup5: String? = null
    var finish: Boolean? = false
    var user_level_num: Int? = 0
    var user_unit_num: Int? = 0
    var level_num: Int? = 0
    var unit_num: Int? = 0
    var views: Int? = 0
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          objectId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("objectId",
              "objectId", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          course_id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("course_id",
              "course_id", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          course_num = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("course_num",
              "course_num", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          current = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("current", "current",
              reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          order = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("order", "order", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          to_activity = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          img = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("img", "img", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          type = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          lock = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          backkup = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          backkup1 = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          backkup2 = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          backkup3 = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          backkup4 = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          backkup5 = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        17 -> {
          finish = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("finish", "finish",
              reader)
          // $mask = $mask and (1 shl 17).inv()
          mask0 = mask0 and 0xfffdffff.toInt()
        }
        18 -> {
          user_level_num = intAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("user_level_num", "user_level_num", reader)
          // $mask = $mask and (1 shl 18).inv()
          mask0 = mask0 and 0xfffbffff.toInt()
        }
        19 -> {
          user_unit_num = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("user_unit_num",
              "user_unit_num", reader)
          // $mask = $mask and (1 shl 19).inv()
          mask0 = mask0 and 0xfff7ffff.toInt()
        }
        20 -> {
          level_num = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("level_num",
              "level_num", reader)
          // $mask = $mask and (1 shl 20).inv()
          mask0 = mask0 and 0xffefffff.toInt()
        }
        21 -> {
          unit_num = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("unit_num",
              "unit_num", reader)
          // $mask = $mask and (1 shl 21).inv()
          mask0 = mask0 and 0xffdfffff.toInt()
        }
        22 -> {
          views = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("views", "views", reader)
          // $mask = $mask and (1 shl 22).inv()
          mask0 = mask0 and 0xffbfffff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<CourseList> = this.constructorRef ?:
        CourseList::class.java.getDeclaredConstructor(Long::class.javaPrimitiveType,
        String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, Boolean::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        id,
        objectId,
        course_id,
        name,
        course_num,
        current,
        order,
        to_activity,
        img,
        type,
        lock,
        backkup,
        backkup1,
        backkup2,
        backkup3,
        backkup4,
        backkup5,
        finish,
        user_level_num,
        user_unit_num,
        level_num,
        unit_num,
        views,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: CourseList?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    longAdapter.toJson(writer, value.id)
    writer.name("objectId")
    stringAdapter.toJson(writer, value.objectId)
    writer.name("course_id")
    stringAdapter.toJson(writer, value.course_id)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("course_num")
    intAdapter.toJson(writer, value.course_num)
    writer.name("current")
    intAdapter.toJson(writer, value.current)
    writer.name("order")
    intAdapter.toJson(writer, value.order)
    writer.name("to_activity")
    nullableStringAdapter.toJson(writer, value.to_activity)
    writer.name("img")
    stringAdapter.toJson(writer, value.img)
    writer.name("type")
    nullableStringAdapter.toJson(writer, value.type)
    writer.name("lock")
    nullableStringAdapter.toJson(writer, value.lock)
    writer.name("backkup")
    nullableStringAdapter.toJson(writer, value.backkup)
    writer.name("backkup1")
    nullableStringAdapter.toJson(writer, value.backkup1)
    writer.name("backkup2")
    nullableStringAdapter.toJson(writer, value.backkup2)
    writer.name("backkup3")
    nullableStringAdapter.toJson(writer, value.backkup3)
    writer.name("backkup4")
    nullableStringAdapter.toJson(writer, value.backkup4)
    writer.name("backkup5")
    nullableStringAdapter.toJson(writer, value.backkup5)
    writer.name("finish")
    booleanAdapter.toJson(writer, value.finish)
    writer.name("user_level_num")
    intAdapter.toJson(writer, value.user_level_num)
    writer.name("user_unit_num")
    intAdapter.toJson(writer, value.user_unit_num)
    writer.name("level_num")
    intAdapter.toJson(writer, value.level_num)
    writer.name("unit_num")
    intAdapter.toJson(writer, value.unit_num)
    writer.name("views")
    intAdapter.toJson(writer, value.views)
    writer.endObject()
  }
}
